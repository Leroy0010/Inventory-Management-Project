plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.15'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
  id 'com.github.johnrengelman.shadow' version '8.1.1'

}

group 'com.leroy'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.2'
  springVersion = '6.2.8'
  tyrusVersion = '2.2.0'
  jacksonVersion = '2.17.1'
  controlsfxVersion = '11.2.2'
  log4jVersion = '2.23.1'
  ikonliVersion = '12.4.0'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'com.leroy.inventorymanagementfx'
  mainClass = 'com.leroy.inventorymanagementfx.InventoryApplication'
  applicationDefaultJvmArgs = [
          '--add-modules', 'org.apache.logging.log4j,org.apache.logging.log4j.core,jakarta.websocket',
  ]
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing', 'javafx.graphics']
}

dependencies {
  // JavaFX related dependencies
  implementation("org.controlsfx:controlsfx:${controlsfxVersion}")
  implementation("com.dlsc.formsfx:formsfx-core:11.6.0") {
    exclude(group: 'org.openjfx', module: 'javafx-base')
    exclude(group: 'org.openjfx', module: 'javafx-controls')
  }
  implementation("net.synedra:validatorfx:0.5.0") {
    exclude(group: 'org.openjfx')
  }
  implementation("org.kordamp.ikonli:ikonli-javafx:${ikonliVersion}")
  implementation 'org.kordamp.ikonli:ikonli-fontawesome6-pack:12.4.0'
  implementation("eu.hansolo:tilesfx:21.0.3") {
    exclude(group: 'org.openjfx')
  }

  // Logging
  implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
  implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

  // Spring WebSocket and Messaging for STOMP Client
  implementation "org.springframework:spring-websocket:${springVersion}"
  implementation "org.springframework:spring-messaging:${springVersion}"
  implementation "org.springframework:spring-context:${springVersion}"
  implementation "org.springframework:spring-core:${springVersion}"
  implementation "org.springframework:spring-beans:${springVersion}"

  // WebSocket Runtime (Tyrus for JSR-356 compliance)
  implementation "org.glassfish.tyrus:tyrus-client:${tyrusVersion}"
  implementation "org.glassfish.tyrus:tyrus-container-grizzly-client:${tyrusVersion}"

  // JSON Processing (Jackson)
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
  implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

  // JWT dependencies
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  // Testing
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

modularity {
  patchModules {
    patchModule('jjwt.api', 'io.jsonwebtoken:jjwt-api')
    patchModule('org.apache.logging.log4j', "org.apache.logging.log4j:log4j-api")
    patchModule('org.apache.logging.log4j.core', "org.apache.logging.log4j:log4j-core")
    patchModule('org.glassfish.tyrus.core', "org.glassfish.tyrus:tyrus-core")
    patchModule('org.glassfish.tyrus.spi', "org.glassfish.tyrus:tyrus-spi")
    patchModule('jakarta.websocket', "jakarta.websocket:jakarta.websocket-api")
    patchModule('jakarta.websocket.client', "jakarta.websocket:jakarta.websocket-client-api")
  }
  
}

test {
  useJUnitPlatform()
}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

jar {
  manifest {
    attributes (
            'Main-Class': 'com.leroy.inventorymanagementfx.InventoryApplication'
    )
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(24)
  }
}

shadowJar {
  archiveBaseName.set("InventoryManagementFx")
  archiveClassifier.set("")
  archiveVersion.set("1.0")
  mergeServiceFiles()
  manifest {
    attributes 'Main-Class': 'com.leroy.inventorymanagementfx.InventoryApplication'
  }
}


tasks.register('copyRuntimeLibs', Copy) {
  from configurations.runtimeClasspath
  into "$buildDir/libs/lib"
}