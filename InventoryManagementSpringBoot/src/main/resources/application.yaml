spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.yaml
    enabled: true
  application:
    name: InventoryManagementSpringBoot
  devtools: # These settings are generally for local development and might not have an effect in a Dockerized production environment
    restart:
      enabled: true
    livereload:
      enabled: true
      port: 8080
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            # For desktop apps, "urn:ietf:wg:oauth:2.0:oob" is common for out-of-band flow
            redirect-uri: "urn:ietf:wg:oauth:2.0:oob"
            scope:
              - email
              - profile
            authorization-grant-type: authorization_code
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
            user-name-attribute: email
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enabled: true
            required: true
          ssl:
            protocols: TLSv1.2
        test-connection: false # You might want to set this to false for production if it causes issues on startup
  task:
    execution:
      pool:
        core-size: 2
        max-size: 10
        queue-capacity: 100
      thread-name-prefix: MailSender-

jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000

server:
  servlet:
    session:
      cookie:
        same-site: LAX
        # IMPORTANT: For Render (HTTPS), this should be 'true' in production.
        # You can either set it here and remember to change it, or use an env var.
        # Let's set it to true for Render's HTTPS environment.
        secure: true

app:
  frontend:
    # This will be the public URL of your Spring Boot backend on Render,
    # as your JavaFX app will interact directly with your backend's public endpoint.
    base-url: ${FRONTEND_BASE_URL}